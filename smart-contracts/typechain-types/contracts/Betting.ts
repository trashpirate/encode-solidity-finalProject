/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BettingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betDown"
      | "betFee"
      | "betPrice"
      | "betUp"
      | "book"
      | "claimPrize"
      | "closeRound"
      | "downPool"
      | "openRound"
      | "owner"
      | "ownerPool"
      | "ownerWithdraw"
      | "paymentToken"
      | "prize"
      | "renounceOwnership"
      | "roundClosingTime"
      | "roundOpen"
      | "totalPool"
      | "transferOwnership"
      | "upPool"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "betDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "betFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "betPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "betUp", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "book", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "downPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prize", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundClosingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roundOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "upPool", values?: undefined): string;

  decodeFunctionResult(functionFragment: "betDown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "book", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "downPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundClosingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upPool", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Betting extends BaseContract {
  connect(runner?: ContractRunner | null): Betting;
  waitForDeployment(): Promise<this>;

  interface: BettingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betDown: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  betFee: TypedContractMethod<[], [bigint], "view">;

  betPrice: TypedContractMethod<[], [bigint], "view">;

  betUp: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  book: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        position: bigint;
        amount: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  claimPrize: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  closeRound: TypedContractMethod<[], [void], "nonpayable">;

  downPool: TypedContractMethod<[], [bigint], "view">;

  openRound: TypedContractMethod<
    [closingTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerPool: TypedContractMethod<[], [bigint], "view">;

  ownerWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  paymentToken: TypedContractMethod<[], [string], "view">;

  prize: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roundClosingTime: TypedContractMethod<[], [bigint], "view">;

  roundOpen: TypedContractMethod<[], [boolean], "view">;

  totalPool: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upPool: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betDown"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "betFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "betPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "betUp"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "book"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        position: bigint;
        amount: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "downPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openRound"
  ): TypedContractMethod<[closingTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prize"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roundClosingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roundOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upPool"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
